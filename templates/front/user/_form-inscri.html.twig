{{ form_start(form, {'attr': {'enctype':'multipart/form-data'}}) }}
{{ form_widget(form._token) }}

<h4 class="mb-2">Adventure starts here ðŸš€</h4>
<p class="mb-4">Make your app management easy and fun!</p>

<form
        id="formAuthentication"
        class="mb-3"
        action="index.html"
        method="POST"
>
    <div class="mb-3">
        <label for="username" class="form-label">Numero</label>
        <input
                type="text"
                class="form-control"
                id="username"
                name="{{ field_name(form.numTel) }}"
                value="{{ field_value(form.numTel) }}"
                placeholder="enter your number "
                autofocus
        />
        {% if form_errors(form.numTel) is not empty %}
            <div class="alert alert-danger">
                {{ form_errors(form.numTel) }}
            </div>
        {% endif %}
    </div>
    <div class="mb-3">
        <label for="email" class="form-label">Email</label>
        <input
                type="text"
                class="form-control"
                id="email"
                name="{{ field_name(form.email) }}"
                value="{{ field_value(form.email) }}"
                placeholder="Entrez votre email"
        />
        {% if form_errors(form.email) is not empty %}
            <div class="alert alert-danger">
                {{ form_errors(form.email) }}
            </div>
        {% endif %}
    </div>

    <div class="mb-3 form-password-toggle">
        <label class="form-label" for="password">Password</label>
        <div class="input-group input-group-merge">
            <input
                    type="password"
                    id="password"
                    class="form-control"
                    name="{{ field_name(form.password) }}"
                    value="{{ field_value(form.password) }}"
                    placeholder="&#xb7;&#xb7;&#xb7;&#xb7;&#xb7;&#xb7;&#xb7;&#xb7;&#xb7;&#xb7;&#xb7;&#xb7;"
                    aria-describedby="password"
            />

            <span class="input-group-text cursor-pointer"
            ><i class="bx bx-hide"></i
                ></span>
        </div>
        {% if form_errors(form.password) is not empty %}
            <div class="alert alert-danger">
                {{ form_errors(form.password) }}
            </div>
        {% endif %}
    </div>
    <div class="mb-3">
        <label for="image" class="form-label">Image</label>
        <!-- Input pour importer une image -->
        {{ form_widget(form.image, {
            attr: { class: "form-control", accept: "image/*" }
        }) }}
        {% if form_errors(form.image) is not empty %}
            <div class="alert alert-danger">
                {{ form_errors(form.image) }}
            </div>
        {% endif %}

        <!-- Bouton pour ouvrir la camÃ©ra -->
        <div class="mb-3">
            <button id="openCamera" type="button" class="btn btn-primary">
                Ouvrir la camÃ©ra
            </button>
        </div>

        <div id="cameraStream" style="position: relative; display: none">
            <div
                    style="
                    display: flex;
                    justify-content: center;
                    align-items: center;
                    height: 100vh;
                  "
            >
                <video
                        id="video"
                        width="300"
                        height="225"
                        autoplay
                        muted
                        style="border: 3px solid #ddd; position: absolute"
                ></video>
                <canvas
                        id="overlay"
                        width="300"
                        height="225"
                        style="position: absolute"
                ></canvas>
            </div>
            <div id="smileMessage" style="color: red; display: none">
                Please smile at the camera!
            </div>
            <!-- Input cachÃ© pour stocker la photo capturÃ©e -->
            <input type="hidden" name="realTimePhoto" id="realTimePhoto"/>
        </div>
        <button
                id="snap"
                type="button"
                class="btn btn-primary"
                style="display: none"
        >
            Capture
        </button>
    </div>
    <!-- ...other elements... -->

    <!-- Button to save the captured image -->

    <!-- Canvas to display the captured image -->
    <canvas
            id="canvas"
            width="300"
            height="225"
            style="display: none"
    ></canvas>
    <script src="{{ asset('js/face-api.min.js') }}"></script>

    <div class="mb-3">
        <div class="form-check">
            <input
                    class="form-check-input"
                    type="checkbox"
                    id="terms-conditions"
                    name="terms"
            />
            <label class="form-check-label" for="terms-conditions">
                I agree to
                <a href="javascript:void(0);">privacy policy & terms</a>
            </label>
        </div>
    </div>
    <button class="btn btn-primary d-grid w-100" type="submit">
        Sign up
    </button>
</form>

<p class="text-center">
    <span>Already have an account?</span>
    <a href="{{ path('app_login') }}">
        <span>Sign in instead</span>
    </a>
</p>


{{ form_end(form) }}
{% block javascripts %}

    <script>
        const video = document.getElementById("video");
        const canvas = document.getElementById("overlay");
        const context = canvas.getContext("2d");
        let stream = null;

        window.onload = async () => {
            await faceapi.nets.tinyFaceDetector.loadFromUri(
                "/models/tiny_face_detector"
            );
            await faceapi.nets.faceLandmark68Net.loadFromUri(
                "/models/face_landmark_68"
            );
            await faceapi.nets.faceExpressionNet.loadFromUri("/models/face_expression");
            await faceapi.nets.faceRecognitionNet.loadFromUri(
                "/models/face_recognition"
            ); // Make sure to load this model
        };

        document.getElementById("openCamera").addEventListener("click", async () => {
            try {
                stream = await navigator.mediaDevices.getUserMedia({video: {}});
                video.srcObject = stream;
                video.play();
                document.getElementById("cameraStream").style.display = "block";
                document.getElementById("snap").style.display = "block";
            } catch (error) {
                console.error("Error opening the camera", error);
            }
        });

        video.addEventListener("play", () => {
            const displaySize = {width: video.width, height: video.height};
            faceapi.matchDimensions(canvas, displaySize);

            setInterval(async () => {
                const detections = await faceapi
                    .detectAllFaces(video, new faceapi.TinyFaceDetectorOptions())
                    .withFaceLandmarks()
                    .withFaceExpressions();

                const resizedDetections = faceapi.resizeResults(detections, displaySize);
                canvas.getContext("2d").clearRect(0, 0, canvas.width, canvas.height);
                faceapi.draw.drawDetections(canvas, resizedDetections);
                faceapi.draw.drawFaceLandmarks(canvas, resizedDetections);

                detections.forEach((detection) => {
                    // const box = detection.detection.box;
                    // const drawBox = new faceapi.draw.DrawBox(box, {label: "Face"});
                    // drawBox.draw(canvas);

                    const expressions = detection.expressions;
                    const maxValue = Math.max(...Object.values(expressions));
                    const expression = Object.keys(expressions).filter(
                        (key) => expressions[key] === maxValue
                    );
                    const text = [`${expression[0]}: ${maxValue.toFixed(2)}`];
                    const drawText = new faceapi.draw.DrawTextField(text, box.bottomLeft);
                    drawText.draw(canvas);
                });
            }, 100);
        });

        document.getElementById("snap").addEventListener("click", () => {
            const video = document.getElementById("video");
            const canvas = document.getElementById("overlay");
            const context = canvas.getContext("2d");

            context.drawImage(video, 0, 0, canvas.width, canvas.height);

            const dataURL = canvas.toDataURL("image/png");

            const link = document.createElement("a");
            link.href = dataURL;
            link.download = "captured.png";
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);

            const stream = video.srcObject;
            if (stream) {
                stream.getTracks().forEach((track) => track.stop());
            }

            video.style.display = "none";
            canvas.style.display = "none";
            document.getElementById("snap").style.display = "none";

            document.getElementById("smileMessage").style.display = "none";
        });

        video.addEventListener("play", () => {
            const displaySize = {width: video.width, height: video.height};
            faceapi.matchDimensions(canvas, displaySize);
            setInterval(async () => {
                const detections = await faceapi
                    .detectAllFaces(video, new faceapi.TinyFaceDetectorOptions())
                    .withFaceExpressions();

                const resizedDetections = faceapi.resizeResults(detections, displaySize);
                canvas.getContext("2d").clearRect(0, 0, canvas.width, canvas.height);
                faceapi.draw.drawDetections(canvas, resizedDetections);
                faceapi.draw.drawFaceExpressions(canvas, resizedDetections);

                const smileThreshold = 0.7;
                let isSmiling = false;

                detections.forEach((detection) => {
                    const expressions = detection.expressions;
                    if (expressions.happy > smileThreshold) {
                        isSmiling = true;
                    }
                });

                const smileMessageElement = document.getElementById("smileMessage");
                if (!isSmiling) {
                    smileMessageElement.style.display = "block";
                } else {
                    smileMessageElement.style.display = "none";
                }
            }, 100);
        });
    </script>
{% endblock %}
